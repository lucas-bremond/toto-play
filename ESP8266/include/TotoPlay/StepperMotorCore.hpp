////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
///	This file is part of the TotoPlay library.
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///	@file 						TotoPlay/StepperMotorCore.hpp
///	@author 					Lucas Bremond <lucas@axelspace.com>
///	@date 						17 Nov 2016

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __TotoPlay_StepperMotorCore_HPP_INCLUDED__
#define __TotoPlay_StepperMotorCore_HPP_INCLUDED__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SmingCore/SmingCore.h>

#include <TotoPlay/Angle.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace TotoPlay
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StepperMotorController ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StepperMotorCore
{

	public:

								StepperMotorCore							( ) ;

		virtual					~StepperMotorCore							( ) ;

		bool					hasChannel									(			StepperMotorController&		aStepperMotorController				) const ;
		bool					isChannelBusy								(	const	StepperMotorController&		aStepperMotorController				) const ;

		void					start										( ) ;
		void					stop										( ) ;

		void					addChannel									( 			StepperMotorController&		aStepperMotorController				) ;
		void					removeChannel								( 			StepperMotorController&		aStepperMotorController				) ;

		void					rotate										(	const	Angle&						anAngle,
																						StepperMotorController&		aStepperMotorController				) ;

	private:

		// struct Channel
		// {

		// 	StepperMotorController* stepperMotorControllerPtr_ ;
			
		// } ;

		Vector<StepperMotorController*> channels_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern StepperMotorCore 		stepperMotorCore ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////